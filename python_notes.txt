            ФУНКЦИИ В ПИТОНЕ

    def hello():         |
        print("Hello")   |   задание процедурной функции, которая не имеет на входе параметров
        
        
    def hello(name):             |
        print("Hello,", name)    | задание функции с входныи параметром, который пото будет использоваться
        
    
    так же, можно приравнять переменную к функции, и переменная приобретает свойства функции:
    а = hello --- без скобок, в которых указывается входной параметр
    после этого мы вполне можем использовать переменную как функцию --- а()
    
    
    def max2(x,y):      |
        if x > y:       |
            return(x)   |
        else:           |
            return(y)   | задание функции с возвратом результата
            
            
    def max2(x,y):      |
        if x > y:       |
            return(x)   |
        return(y)       | задание функции с возвратом результата --- второй вариант записи
            
    return --- прекращает выполнение функции
    
    
    
    def max3(x,y,z):
        return max2(x, max(y,z)) --- сначала считаются параметры, потом все остальное
                        // функция max3 вызывает функцию max2
                        
    print max3(2,5,7)
    
    print("a","ab","abc") --duck typing - утиный полиморфизм - любое нечто, которое можно сравнивать друг с другом - допустимо сравнивать в качестве аргументов
    
    лексикографический порядок строк - мы начинает сравнивать последовательно по буквам - какая буква по алфавиту старше
    
    
    def hello_separated(name= "world", separator="-"):
        print("Hello,", name, sep = separator) - вызов функции принт с явным указанием параметра sep
        
        hello_separated(aeparator = "-", name = "John") -- явное присваиваивание --- именованные параметры
        
        
        
        ****синхронность работы функций   
        вызвав функцию - я передаю ей управление, сама программа останавливается, пока выполняется функция
        ****стек вызовов - call stack
       main - функция а - функция b - функция с - функция d
       
       
       функции начинающие программисты используют неправильно
       проектирование приложений, они не будут большими, пока не вкатищься в структурное программирование - использование функций и простых синтаксических конструкций.
       
       парадигма -- проектирование сверху-вниз --- 
       
"""в питоне в тройных кавычках мы также можем писать комментарии"""

суть структурного программирования заключается в том, что большую задачу можно пилить на более мелкие, которые будут решаться функциями. При этом следует сначала написать костяк программы, которая еще ничего не будет делать, но, будет работать, после этого следует начать подбирать-писать названия функций и небольшую документационную строку. В этом время все эти функции пока что просто заглушки. Постепенно мы заменяем заглушки на работоспособный код и тем самым заканчиваем программу.


метод решения задач - метод грубой силы (брутфорс) - предполагает простой перебор методов решения




       
       
       
      
        
    
    
        