-- главу про запуск первой программы на ассемблере я пропущу, хотя, могу попробовать вставить текст из того файлика, который делал с обычными комментариями к коду насма (nasm). Впрочем, там ничего не сохранилось.

ОСНОВЫ СИСТЕМЫ КОМАНД I386

регистр - некое электронное устройство в составе проца, в котором может содержаться определенное количество данных в виде двоичных разрядов.

регистры можно поделить на:
- регистры общего назначения (EAX, EBX, ECX, EDX, ESI, EBP, ESP) -  буква Е означает extended - расширенный регистр. Регистр делится на старшую часть и младшую, младшая обозначается тем же именем регистра, только без буквы Е вначале, то есть младший регистр - регистр не расширенный.
В свою очередь эти регистры делятся еще и на восьмибитовые регистры (например - AX делится на AL AH - high and low register)

** буквы регистрам даны неспроста EAX - регистр-аккумулятор - регистр, учавствующий в любый арифметических операциях в роли одного и операндов в качестве места, куда стоило бы поместить результат. Название пошло из бородатых годов еще в самого фон Неймана.

- сегментные регистры (CS, DS, SS, ES, GS, FS) - в плоской модели памяти не используются

- специальные регистры (счетчик команд, или он же - указатель текущей инструкции EIP - хранит в себе адрес ячейки памяти с которой следует считывать следующую машинную инструкцию и регистр флагов FLAGS - используется для условных переходов)

ZF - флаг нулевого результата - устанавливается в ходе выполнения арифметических операций и операций сравнения, если в результате операции получился ноль - флаг устанавливается в единицу

CF - флаг переноса после выполнения арифметики над беззнаковыми числами, если требуется перенос в старший бит, то есть если в регистр не поместился результат.

SF - sign flag - устанавливается равным старшему биту, который для знаковых чисел соответствует знаку числа

OF - overflow flag - флаг переполнения - выставляется в единицу, если произошло переполнение 

DF - direction flag - флаг направления, устанавливается командой std и обнуляется командой cld - в зависимости от его состояния строковые операции выполняются в прямом или обратном порядке

PF & AF - флаг четности и флаг полупеноса

IF & TF - флаги разрешения прерываний и ловушки - доступны только в привелегированном режиме работы процессора



        ПАМЯТЬ ПОЛЬЗОВАТЕЛЬСКОЙ ЗАДАЧИ. СЕГМЕНТЫ.

емкость регистров слишком мала для того, чтобы в них уместить какую-то более менее сложную программу, они служат для хранения настроек и для хранения информации, которая может понадобиться срочно.

поэтому, для хранения информации программа может пользоваться оперативной памятью. В архитектуре фон Неймана и сама программа располагается в ячейках оперативной памяти, которые сами по себе одинаковы и меют адрес из единого адресного пространства. Одна ячейка памяти способна хранить один байт, то есть восемь бит информации.

Немотря на то, что все ячейки одинаковы, ОС может ограничить доступ к некоторым ячейкам. Некотороые области памяти могут быть доступны только для чтения, но не для изменения, не всякую область разрешено рассматривать как бинарную инфу, то есть заносить адреса этих ячеек в регистр счетчика команд. 

// Фактически, мы наблюдаем отдельное адресное пространство для машинных команд.

Если задаче позволено рассматривать содержимое области памяти как фрагмент бинаря, то говорят, что эта область памяти доступна на исполнение.

область памяти, которую задача может модифицировать - доступ на запись.

обычно ОС выструаивают виртуальное пространство пользовательской задачи, разделив его на несколько сегментов, среди которых можно выделить три основных - сегмент кода, сегмент данных и сегмент стека.

первые два сегмента формируются на основе инфы, записанной в исполняемом файле, третий в никсах содержит инфу о параметрах командйо строки и о переменных коружения.

информация в исполняемом файле орагнизована в виде секций, причем содержимое одного сегмента может быть сформировано из одной или нескольких секций, некоторые секции выполняют вспомогательную роль и при запуске не загружаются.

в сегменте кода расположен машинный код, из которого состоит программа, выделенная память под сегмент кода доступна задаче на исполнение, но ОС запрещает модифицировать сегмент кода самой задаче.

в сегменте данных хранятся все глобальные и динамические переменные - доступен задаче и на запись и на чтение - чтобы записывать переменные

первоначальное состояние сегмента данных формируется двумя секциями - секцией данных и секцией неинициализированных данных (BSS)

куча - область памяти, в которой размещаются динамические переменные.

сегмент стека - нужен для хранения локальных переменных в подпрограммах и адресов возврата из подпрограммы

            ДИРЕКТИВЫ ДЛЯ ОТВЕДЕНИЯ ПАМЯТИ

условные обозначения машинных команд ассемблер транслирует в образ области памяти - массив числе, которые нужно будет записать в смежные ячейки оперативной памяти. Затем при запуске программы в эту область памяти будет передано управление (адрес какой-то их ячеек будет записаен в регистр EIP - которые содержит адрес ячейки с командой для выполнения процессором) после этого процессор начнет выполенение программы, используя числа из созданного ассемблером образа в качестве кодов команд.

команда mov - команда пересылки данных из одного места в другое. имеет два операнжа, то есть два параметра, записываемых после мнемокода команды. первый операнд - задает то место, куда будут помещены данные, а второй операнд - то, откуда они будут взяты.

mov eax,ebx - копирует данные из регистра в регистр. команда mov только копирует данные, не производя с ними никаких операций.

в случае mov ecx, 5 - заносит в регистр некое число, заданное непосредственно в самой команде. если в операнде название регистра - то его называют регистровым операндом, если там какое-то значение, то речь идет про непосредственный операнд. 

следует заметить, что это по сути своей даже две разных команды с совершенно разными машинными кодами - причем первая, где только регистровые операнды - занимает два байта, а вторая - пять, четыре из которых тратятся на размещение непосредственного операнда.

кроме друх операндов существует также и третий операнд - адресный операнд или операнд типа "память" - операнд тем или иным способом задает адрес ячейки или области памяти, с которой нужно произвести заданной командой действие.

в NASM операнд типа память всегда обозначается квадратными скобками

            КОСВЕННАЯ АДРЕСАЦИЯ
            
    косвенная адресация - в отличие от прямой адресации требует от процессора, например, вычислить значение или взять значение откуда-то и использовать его в качестве адреса памяти. при прямой адресации адрес задается явно.
    i386 позволяет для косвенной адресации использовать только значения, хранимые в регистрах процессора.
    mov ebx, [eax] - взять значение из регистра eax, использовать его в качестве адреса памяти, обратиться к этой памяти, взять оттуда четыре байта и занести его в регистр ebx.
    mov ebx, eax - возьми значение из регистра eax, и скопируй его в регистр ebx. 
    
    
            ПРОЦЕСС СБОРКИ ПРОГРАММЫ НА NASM
            
nasm -f elf hello5.asm - -f elf указывает ассемблеру, что на выходе мы ожидаем объектный файл в формате elf (формат для исполняемых и собираемых файлов)

ld -m elf_i386 hello5.o -o hello5 -- запуск компоновщика с заданием исполняемого файла.

немного заметок по коду, который лежит в second.asm :

-адрес для обращения к памяти не всегда задан заранее, мы можем вычислить адрес уже во время выполнения программы, занести результат вычислений в регистр процессора и воспользоваться косвенной адресацией.

- возможности проца по вычислению исполнительного адреса можно задействовать отдельно от обращения к памяти. Для этого предусмотрена команда lea (load effective address). имеет два операнда - первый обязательно должен быть регистровым, второй - операндом памяти.
- команда lea только вычисляет адрес, не обращаясь к памяти.
- 565 страница


РЕГИСТРЫ ОБЩЕГО НАЗНАЧЕНИЯ
EAX -аккумулятор
EBX - База
ECX - счетчик
EDX - данные

Регистр EAX может быть разделен на два 16 разрядных регистра, младший регистр - AX - может быть разделен еще на два 8 разрядных регистра - AH и AL -высокий и низкий регистр.

Если мы заносим в регистр 0х12345678, то регистр AX будет содержать 0x5678, AH - 0x56 , AL - 0x78, значение 0х1234 будет занесено в старший регистр EAX.


26/09/2021

            РАЗМЕРЫ ОПЕРАНДОВ И ИХ ДОПУСТИМЫЕ КОМБИНАЦИИ
           
три типа операндов - непосредственные, которые задают значение прямо в команде; регистровые, которые предписывают взять значение из регистра или поместить и операнды типа память, когда задается адрес, по которому в памяти находится нужное значение или по которому в память надо записать результат работы команды.

    нельзя в командах использовать два значения типа память, переписывание памяти может осуществляться только через регистр
    
    для помещения в память конкретного числа нужно строго указывать, что это такое - число, слово, двойное слово или где:
    mov [x], dword 25 или mov dword[x], 25
    без добавления асс не поймет, что ему нужно вносить в ячейку памяти
    
    операции сложения и вычитания над целыми числами производятся соответственно командами add и sub, обе команды имеют по два операнда, первый операнд должен быть или регистровым или операндом типа память.
    add eax, ebx - взять значение из регистра eax и прибавить к нему значение из регистра ebx
    
    в соответствии с полученным результатом команд add и sub выставляют значения флагов OF, CF, ZF, SF 
    флаг ZF устанавливается, если в результате последней операции получился ноль, в противном случае флаг сбрасывается
    флаги SF & OF используются только со знаковыми числами. SF устанавливается, если получено отрицательное число, иначе сбрасывается, процессор производит установку этогно бита
    флаг OF выставляется, если произошло переполнение - используется только для знгаковых чисел.
    
    пакетные ос, ос реального времени
    
    аппаратная поддержка защиты памяти --- привелегированный режим работы ЦП (режим ядра или режим супервизора), непривилегированный - режим пользователя
    пользовательская программа може модифицировать данные только в отведенной ей памяти, любые другие действия требудет обращения к ОС
    если во время, например, ввода-вывода проц опрашивает контроллер постоянно -активное ожидание
    
    запрос прерывания --- обработчик прерывания
    
    для реализации мультизадачной операционной системы аппаратное обеспечение компьютера обязано поддерживать:
    -аппарат прерываний
    -защиту памяти
    -привилегированный и ограниченный режимы работы центрального процессора
    -таймер
    
    
    аппаратное - внешнее прерывание - для передачи прерывания от устройства к ЦП используется отдельная дорожка шины, а на ЦП - отдельные контакты
    --малое упрятываение - созранение процессором текущих значений счетчика команд и регистра флагов
    -- передача управленя на точку входа в процедуру -- обработчик прерывания
    
    - операции, которые процессор не может выполнить - исключения - почти то же самое, что и прерывание, с одним условием, что по шине не происходит обмена данными
    
    --для хранения обработчиков аппаратных прерываний и исключений снабжены номерами от 0 до 255, в оперативке выделяется специальная область для хранения таблицы дестрипторов прерываний.
    -- исключения - внутренние прерывания
    -- обращение пользовательской задачи к ОС - системный вызов
    
    _exit - системный вызов для завершения команды
    
    для ввода данных используется вызов read, имеет номер 3 - первый параметр его - номер дескриптора потока ввода, второй параметр - адрем области памяти, в которой следует разместить прочитанные данные, третий - количество байтов, которые надлежит попытаться прочитать.
    следует понимать, что программа, в которой используется вызов read и не производится анализ его результата, заведомо неправильна, так как мы без анализа не можем знать, сколько первых байт в нашей области содержат реальную инфу, а сколько там осталось мусорных
    на момент запуска программы для нее, как правило, открыты потоки ввода-вывода с номерами 0 - стандартный ввод, 1 - стандартный вывод, 2 - вывод ошибок
    
    я ОЧЕНЬ  бегло прочитал первый том, некоторые вещи я уяснил, но, судя по всему - потом придется возвращаться и не раз к нему.
    
    
    
    
    
    
    
    
    
    
    
    
    
    




    
    




            







                                                    


